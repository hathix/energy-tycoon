
ET.City = Backbone.Model.extend({
	/*
	 * Data for an individual city, where you can build plants.
	 * Fields:
	 * String name
	 * bool owned (by player)
	 * bool headquarters
	 * Collection<Plant> plants (up to 3) plants in this city.
	 * int expansionCost how much money it costs to unlock this city.
	 * Object suitability Keeps track of how well each power type does in this city. Contains fields {"solar": 1-5, "fuelcell": 1-5, ... } (uses the power sources' slugs)
	 * Region region (see Regions enum)
	 * int[] nationalCoords coordinates of city on the national map in form [x,y] where x and y are in percents from top left (in decimal form)
	 * int[] regionalCoords coordinates for the region they're in. Same format as national.
	 *
	 * In constructor, pass:
	 * String name
	 * String regionName ("Northeast", "West", etc.)
	 * int[] nationalCoords
	 * int[] regionalCoords
	 * 
	 * Events fired:
	 * change:plants		When the plants in this city are changed (new one built, one upgraded, etc.)
	 */

	defaults : function() {
		return {
			owned : false,
			headquarters : false,
			plants : new Backbone.Collection,
			expansionCost : 20000
		};
	},

	constructor : function() {
		Backbone.Model.prototype.constructor.apply(this, arguments);

		if (this.get('regionName')) {
			this.set('region', ET.Regions[this.get('regionName')]);
		}
		
		this.listenTo(this.get('plants'), "change", function(){
			this.trigger('change:plants');
		});
	},

	/**
	 * Returns the annual income of the sum of this city's power plants.
	 */
	getIncome : function() {
		return _.reduce(this.get('plants').pluck('income'), function(sum, x) {
			return sum + x;
		}, 0);
	},

	/**
	 * Returns the amount of power (in GWh) generated by the sum of this city's power plants.
	 */
	getPower : function() {
		return _.reduce(this.get('plants').pluck('powerProduction'), function(sum, x) {
			return sum + x;
		}, 0);
	},

	/**
	 * Returns how much money it would take to make this city your headquarters.
	 */
	getHeadquarterCost : function() {
		return this.get('expansionCost') * 2;
	},

	/*
	 * Constructs the given plant in this city NOW.
	 */
	buildPlant : function(plant) {
		if (ET.career.spendMoney(plant.get('constructionCost'))) {
			this.get('plants').add(plant);
			plant.set('city', this);
		}

	},

	/*
	 * Destroys the given plant in this city NOW.
	 */
	destroyPlant : function(plant) {
		if (ET.career.spendMoney(plant.getDestructionCost())) {
			this.get('plants').remove(plant);
		}
	},

	/**
	 * Convenience method that returns the one plant whose cid matches the given one.
	 */
	getPlantByCID : function(cid) {
		var plants = this.get('plants').filter(function(plant) {
			return plant.cid === cid
		});
		return plants[0];
	},
	
	/**
	 * Returns true iff this city is the HQ.
	 */
	isHeadquarters: function(){
		return this.get('headquarters') === true;
	},
	
	/**
	 * Returns true iff this city is commanded by the player.
	 */
	isOwned: function(){
		return this.get('owned') === true;
	}	
});